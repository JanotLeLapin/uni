---
import type { GetStaticPaths, MarkdownInstance } from 'astro';

import Layout from '@layouts/Layout.astro';

import fs from 'node:fs';
import pa from 'node:path';

export type NamedTree = {
  [key: string]: NamedTree | string[];
};

export const collections: NamedTree = {
  maths: ['algebre', 'generale'],
  info: ['python', 'application'],
};

export const makePaths = (parents: string[], path: string[]): string[] => {
  return fs.readdirSync(pa.join(...parents, ...path)).flatMap(entry => {
    const stat = fs.statSync(pa.join(...parents, ...path, entry));
    if (stat.isDirectory())
      return makePaths(parents, [...path, entry]);
    else
      return path.join('/') + '/' + entry.split('.')[0];
  })
}

export const getStaticPaths = (() =>
  makePaths([process.cwd(), 'src', 'content'], []).map(path => ({ params: { path } }))
) satisfies GetStaticPaths;

const { path } = Astro.params;

const entries = await Astro.glob("../content/**/*.md");
const entry = entries.find(e => e.file.includes(path)) as MarkdownInstance<Record<string, any>>;

const { title, katex } = entry.frontmatter;
---

<Layout {title} {katex}>
  <main><Fragment set:html={entry.compiledContent()} /></main>
  <nav class="headings">
    <ul>
      {entry.getHeadings().map(heading => (
        <li style={{ marginLeft: heading.depth * 6 + 'px' }}>
          <a href={'#' + heading.text.toLowerCase().split(' ').join('-')}>{heading.text}</a>
        </li>
      ))}
    </ul>
  </nav>
</Layout>
